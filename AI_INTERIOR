
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Interior - 당신의 공간, AI로 새롭게</title>
    
    <!-- Tailwind CSS CDN 링크 -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- 구글 폰트 (Noto Sans KR) 임포트 -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@300;400;700&display=swap" rel="stylesheet">
    
    <style>
        /* Cafe24Oneprettynight 폰트 임포트 */
        @font-face {
            font-family: 'Cafe24Oneprettynight';
            src: url('https://fastly.jsdelivr.net/gh/projectnoonnu/noonfonts_twelve@1.1/Cafe24Oneprettynight.woff') format('woff');
            font-weight: normal;
            font-style: normal;
        }

        /* CSS 변수 정의 */
        :root {
            --primary-color: #f0950c;
            --text-color: #333;
            --light-gray-color: #f4f6f8;
            --border-color: #e0e0e0;
        }

        /* 기본 스타일 */
        * { margin: 0; padding: 0; box-sizing: border-box; }
        html { scroll-behavior: smooth; }
        body { font-family: 'Cafe24Oneprettynight', 'Noto Sans KR', sans-serif; color: var(--text-color); line-height: 1.6; overflow-x: hidden; background-color: #fff; }
        .container { width: 90%; max-width: 1100px; margin: 0 auto; padding: 0 15px; }

        /* 헤더 & 네비게이션 */
        header { background-color: #fff; padding: 1rem 0; border-bottom: 1px solid var(--border-color); position: sticky; top: 0; z-index: 1000; box-shadow: 0 2px 4px rgba(0,0,0,0.05); }
        nav { display: flex; justify-content: space-between; align-items: center; }
        nav .logo { font-size: 1.5rem; font-weight: 700; color: var(--primary-color); font-family: 'Cafe24Oneprettynight', sans-serif; cursor: pointer; }
        nav ul { list-style: none; display: flex; gap: 1.5rem; }
        nav ul li a { text-decoration: none; color: var(--text-color); font-weight: 400; transition: color 0.3s ease; cursor: pointer; }
        nav ul li a:hover { color: var(--primary-color); }
        .has-submenu { position: relative; }
        .submenu { position: absolute; top: 100%; left: 0; background-color: #fff; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); border-radius: 5px; min-width: 180px; padding: 0.5rem 0; list-style: none; opacity: 0; visibility: hidden; transform: translateY(10px); transition: all 0.3s ease; z-index: 100; }
        .has-submenu:hover .submenu, .has-submenu:focus-within .submenu { opacity: 1; visibility: visible; transform: translateY(0); }
        .submenu li a { padding: 0.75rem 1.5rem; display: block; white-space: nowrap; }
        .submenu li a:hover { background-color: var(--light-gray-color); color: var(--primary-color); }
        
        /* 버튼 */
        .btn { display: inline-block; padding: 0.75rem 1.5rem; background-color: var(--primary-color); color: #fff; text-decoration: none; border-radius: 5px; font-weight: 700; transition: all 0.3s ease; border: none; cursor: pointer; }
        .btn:hover { background-color: #e08e0b; transform: translateY(-2px); }
        .btn:active { transform: translateY(0); }
        .btn-secondary { background-color: #6c757d; }
        .btn-secondary:hover { background-color: #5a6268; }

        /* 섹션 */
        .section { padding: 4rem 0; }
        .standalone-page { min-height: calc(100vh - 82px - 4rem); background-color: #fff; display: flex; flex-direction: column; justify-content: flex-start; align-items: center; text-align: center; padding-top: 4rem; }
        .section-title { text-align: center; font-size: 2rem; margin-bottom: 3rem; color: #2c3e50; }

        /* 히어로 */
        .hero { padding: 0; position: relative; min-height: 60vh; }
        .hero img { width: 100%; height: 60vh; object-fit: cover; position: absolute; top: 0; left: 0; z-index: 1; }
        .hero-content { position: absolute; bottom: 0; width: 100%; padding: 2rem 1rem 4rem; background: linear-gradient(to top, rgba(0, 0, 0, 0.7), transparent); z-index: 2; color: #fff; display: flex; flex-direction: column; align-items: center; justify-content: flex-end; text-align: center; }
        .hero h1 { font-size: 3rem; margin-bottom: 1rem; color: #fff; }
        .hero p { font-size: 1.2rem; color: #eee; margin-bottom: 2rem; max-width: 800px; }
        
        /* 서비스 설명 블록 */
        .ai-service-explanation .content-block { display: flex; align-items: center; gap: 3rem; margin-bottom: 4rem; text-align: left; }
        .ai-service-explanation .content-block.reverse { flex-direction: row-reverse; }
        .ai-service-explanation .content-block .text-content { flex: 1.2; }
        .ai-service-explanation .content-block .image-content { flex: 1; max-width: 450px; }
        .ai-service-explanation .content-block img { width: 100%; border-radius: 8px; box-shadow: 0 8px 20px rgba(0,0,0,0.12); }
        .ai-service-explanation h3 { font-size: 1.8rem; font-weight: 700; color: var(--primary-color); margin-bottom: 1rem; }
        .ai-service-explanation p { font-size: 1.1rem; color: #555; }

        /* 게시판 */
        .board-form, .board-detail-view { width: 100%; max-width: 800px; margin: 0 auto; background-color: #fff; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 10px rgba(0,0,0,0.1); text-align: left; }
        .board-form input, .board-form textarea { width: 100%; padding: 0.75rem; border: 1px solid var(--border-color); border-radius: 5px; margin-bottom: 1rem; font-size: 1rem; font-family: 'Noto Sans KR', sans-serif; }
        .board-detail-view .detail-meta { margin-bottom: 1.5rem; color: #666; border-bottom: 1px solid var(--border-color); padding-bottom: 1rem; }
        .board-detail-view .detail-content { min-height: 200px; padding: 1rem; background-color: #f9f9f9; border-radius: 5px; border: 1px solid var(--border-color); white-space: pre-wrap; word-break: break-word; }

        /* 로딩 & 메시지 박스 */
        .loading-indicator { display: none; flex-direction: column; align-items: center; justify-content: center; margin-top: 2rem; gap: 1rem; }
        .spinner { border: 4px solid #f3f3f3; border-top: 4px solid var(--primary-color); border-radius: 50%; width: 40px; height: 40px; animation: spin 1s linear infinite; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .message-box { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: white; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); z-index: 1001; text-align: center; width: 80%; max-width: 400px; display: none; }
        .message-box button { margin-top: 1.5rem; }
        .overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 1000; display: none; }
        
        /* 모바일 반응형 */
        @media (max-width: 768px) {
            nav, .ai-service-explanation .content-block, .ai-service-explanation .content-block.reverse { flex-direction: column; gap: 1rem; }
            .hero h1 { font-size: 2.5rem; }
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div id="message-box" class="message-box"><p id="message-text"></p><button id="message-ok-btn" class="btn">확인</button></div>
    <div id="overlay" class="overlay"></div>

    <header>
        <nav class="container"><div class="logo" onclick="navigateToSection('home-section')">AI Interior</div><ul><li><a onclick="navigateToSection('home-section')">홈</a></li><li class="has-submenu"><a>서비스 소개</a><ul class="submenu"><li><a onclick="navigateToSection('ai-interior-recommendation-page')">What is AI Interior</a></li><li><a onclick="navigateToSection('pricing-page')">Price</a></li></ul></li><li><a onclick="navigateToSection('gallery-section')">갤러리</a></li><li class="has-submenu"><a>게시판</a><ul class="submenu"><li><a onclick="navigateToSection('review-board-page')">후기게시판</a></li><li><a onclick="navigateToSection('qa-board-page')">Q&A</a></li></ul></li></ul><a class="btn" onclick="navigateToSection('mypage-page')">LOGIN</a></nav>
    </header>

    <main>
        <section id="home-section" class="hero section">
            <img src="https://images.unsplash.com/photo-1616046229478-9901c5536a45?q=80&w=2080&auto=format&fit=crop" alt="모던한 거실">
            <div class="hero-content"><h1>사진 한 장으로 시작하는<br>나만의 AI 인테리어</h1><p>당신의 공간 사진을 올리고 원하는 스타일을 선택하세요.<br>AI가 몇 초 만에 꿈의 인테리어를 만들어 드립니다.</p><a class="btn" onclick="navigateToSection('ai-interior-recommendation-page', 'ai-generator-section')">시작하기</a></div>
        </section>

        <!-- What is AI Interior & AI 생성기 (업데이트된 버전) -->
        <section id="ai-interior-recommendation-page" class="section standalone-page hidden ai-service-explanation">
            <div class="container">
                <h2 class="section-title">What is AI Interior Service?</h2>
                
                <!-- 1. OCR 설명 -->
                <div class="content-block">
                    <div class="image-content"><img src="https://images.unsplash.com/photo-1583521214690-73421a1829a9?q=80&w=1974&auto=format&fit=crop" alt="문서를 분석하는 모습"></div>
                    <div class="text-content"><h3>1. OCR 기반 공간 및 자산 추정</h3><p>집 계약서, 또는 관련 문서를 업로드하시면, AI가 OCR 기술을 통해 주소, 면적, 방 개수 등 집 공간 정보를 정확하게 파악합니다. 또한, 소득 관련 데이터를 분석하여 예상 가능한 인테리어 자산을 추정하는 데 도움을 드려, 현실적인 예산 내에서 최적의 디자인을 제안할 수 있도록 지원합니다.</p></div>
                </div>

                <!-- 2. 이미지 세그멘테이션 설명 -->
                <div class="content-block reverse">
                    <div class="image-content"><img src="https://images.unsplash.com/photo-1556228453-efd6c1ff04f6?q=80&w=2070&auto=format&fit=crop" alt="가구들이 하이라이트된 거실"></div>
                    <div class="text-content"><h3>2. 이미지 세그멘테이션을 통한 가구 분석</h3><p>현재 보유하고 계신 가구 이미지를 찍어 업로드하면, AI가 이미지 세그멘테이션 기술을 활용하여 가구의 종류, 크기, 색상, 재질 등을 정밀하게 추출합니다. 기존 가구와의 조화를 고려한 인테리어 디자인을 제안함으로써, 불필요한 교체 없이 효율적인 공간 변화를 이끌어냅니다.</p></div>
                </div>

                <!-- 3. 맞춤형 디자인 제안 설명 -->
                <div class="content-block">
                    <div class="image-content"><img src="https://images.unsplash.com/photo-1618220179428-22790b461013?q=80&w=2127&auto=format&fit=crop" alt="아름답게 디자인된 인테리어"></div>
                    <div class="text-content"><h3>3. 맞춤형 AI 인테리어 디자인 제안</h3><p>OCR과 이미지 세그멘테이션을 통해 얻은 <strong>공간 정보와 가구 데이터를 기반으로, AI 시스템이 고객의 취향과 원하는 스타일을 반영하여 맞춤형 공간 디자인을 생성합니다.</strong> 딥러닝 알고리즘이 수많은 디자인 패턴과 트렌드를 학습하여, 단 몇 초 만에 당신의 꿈을 현실로 만들어 드립니다.</p></div>
                </div>

                <!-- 고도화된 AI 생성기 UI -->
                <div id="ai-generator-section" class="w-full p-8 mt-12 bg-white rounded-lg shadow-xl border border-gray-200">
                    <h2 class="text-2xl font-bold mb-6 text-gray-800 text-center">지금 바로 경험해보세요!</h2>
                    <div class="grid md:grid-cols-2 gap-8 items-start">
                        <!-- 입력 폼 (3단계 마법사) -->
                        <div class="space-y-6 text-left">
                            <div class="p-4 border rounded-lg bg-gray-50">
                                <h4 class="font-bold text-lg mb-2">Step 1: 공간 정보 입력</h4>
                                <label class="text-sm font-semibold text-gray-600 block mb-1">계약서/도면 업로드 (OCR 분석)</label>
                                <input type="file" class="w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-orange-50 file:text-orange-700 hover:file:bg-orange-100 mb-2">
                                <label class="text-sm font-semibold text-gray-600 block mb-1">인테리어 예산 (선택)</label>
                                <input type="number" placeholder="예: 5000000" class="w-full p-2 border rounded">
                            </div>
                            <div class="p-4 border rounded-lg bg-gray-50">
                                <h4 class="font-bold text-lg mb-2">Step 2: 기존 가구 분석</h4>
                                <label class="text-sm font-semibold text-gray-600 block mb-1">보유 가구 사진 업로드 (이미지 분석)</label>
                                <input type="file" class="w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-orange-50 file:text-orange-700 hover:file:bg-orange-100">
                            </div>
                            <div class="p-4 border rounded-lg bg-gray-50">
                                <h4 class="font-bold text-lg mb-2">Step 3: 스타일 선택 및 생성</h4>
                                <label class="text-sm font-semibold text-gray-600 block mb-1">원하는 스타일을 알려주세요</label>
                                <textarea id="style-prompt" rows="3" class="w-full p-2 border rounded" placeholder="예: '전체적으로 화이트 톤에 우드 포인트를 준 따뜻한 미드센추리 모던 스타일'"></textarea>
                                <button id="generate-btn-advanced" class="btn w-full mt-3">AI 디자인 생성하기</button>
                            </div>
                        </div>
                        <!-- 결과 출력 영역 -->
                        <div class="text-left sticky top-24">
                            <h3 id="result-title" class="text-lg font-semibold mb-2 text-gray-700 hidden">AI 추천 디자인</h3>
                            <div id="loading-indicator" class="loading-indicator">
                                <div class="spinner"></div><p>AI가 정보를 분석하고 디자인을 생성중입니다...</p>
                            </div>
                            <div id="generated-image-container">
                                <img id="generated-image" class="rounded-lg shadow-md hidden w-full bg-gray-200" alt="AI 생성 인테리어 디자인">
                                <button id="save-image-btn" class="btn mt-4 hidden">이미지 저장</button>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </section>

        <!-- 기타 페이지들 -->
        <section id="pricing-page" class="section standalone-page hidden"><div class="container"><h2 class="section-title">Pricing Plans</h2></div></section>
        <section id="gallery-section" class="section hidden"><div class="container"><h2 class="section-title">AI Interior Gallery</h2></div></section>
        <section id="mypage-page" class="section standalone-page hidden"><div class="container"><h2 class="section-title">My Page</h2></div></section>

        <!-- 후기 게시판 (목록, 글쓰기, 상세보기) -->
        <section id="review-board-page" class="standalone-page hidden"><div class="container"><h2 class="section-title">Review Board</h2><p class="text-lg text-gray-700 mb-8">솔직한 후기를 공유해주세요.</p><div id="review-list-dynamic" class="space-y-4 w-full max-w-3xl"></div><button class="btn mt-10" onclick="navigateToSection('review-write-page')">후기 작성하기</button></div></section>
        <section id="review-write-page" class="standalone-page hidden"><div class="container"><h2 class="section-title">Write a Review</h2><form id="review-form" class="board-form" onsubmit="handleReviewSubmit(event)"><input type="text" id="review-author" placeholder="작성자" required><input type="text" id="review-title" placeholder="제목" required><textarea id="review-content" rows="10" placeholder="내용" required></textarea><div class="flex justify-end gap-4"><button type="button" class="btn btn-secondary" onclick="navigateToSection('review-board-page')">취소</button><button type="submit" class="btn">저장</button></div></form></div></section>
        <section id="review-detail-page" class="standalone-page hidden"><div class="container"><h2 class="section-title">Review Details</h2><div class="board-detail-view"><h3 id="review-detail-title" class="text-2xl font-bold mb-2"></h3><p id="review-detail-meta" class="detail-meta"></p><div id="review-detail-content" class="detail-content"></div></div><button class="btn mt-10" onclick="navigateToSection('review-board-page')">목록으로</button></div></section>

        <!-- Q&A 게시판 (목록, 글쓰기, 상세보기) -->
        <section id="qa-board-page" class="standalone-page hidden"><div class="container"><h2 class="section-title">Q&A</h2><p class="text-lg text-gray-700 mb-8">궁금한 점을 질문하고 답변을 받아보세요.</p><div id="qa-list-dynamic" class="space-y-4 w-full max-w-3xl"></div><button class="btn mt-10" onclick="navigateToSection('qa-write-page')">질문하기</button></div></section>
        <section id="qa-write-page" class="standalone-page hidden"><div class="container"><h2 class="section-title">Ask a Question</h2><form id="qa-form" class="board-form" onsubmit="handleQASubmit(event)"><input type="text" id="qa-author" placeholder="작성자" required><input type="text" id="qa-title" placeholder="질문 제목" required><textarea id="qa-content" rows="10" placeholder="궁금한 점을 작성해주세요" required></textarea><div class="flex justify-end gap-4"><button type="button" class="btn btn-secondary" onclick="navigateToSection('qa-board-page')">취소</button><button type="submit" class="btn">등록</button></div></form></div></section>
        <section id="qa-detail-page" class="standalone-page hidden"><div class="container"><h2 class="section-title">Question Details</h2><div class="board-detail-view"><h3 id="qa-detail-title" class="text-2xl font-bold mb-2"></h3><p id="qa-detail-meta" class="detail-meta"></p><div id="qa-detail-content" class="detail-content"></div></div><button class="btn mt-10" onclick="navigateToSection('qa-board-page')">목록으로</button></div></section>
    </main>

    <footer><div class="container"><p>© 2025 AI Interior. All rights reserved.</p><p>개인정보처리방침 | 이용약관</p></div></footer>

    <script>
        // 전역 변수
        let currentActiveSection = 'home-section';
        // 게시글 데이터를 저장할 배열 (실시간 업데이트를 위해)
        let reviewPostsData = [];
        let qaPostsData = []; // Q&A 게시글 데이터 배열 추가

        // Firebase SDK 가져오기 (전역 스코프에서 사용 가능하도록 설정)
        let app;
        let db;
        let auth;
        let userId = 'anonymous'; // 기본 사용자 ID

        // 앱 ID 및 Firebase 설정 가져오기 (Canvas 환경 변수)
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};


        // 유틸리티 함수
        /**
         * 사용자 정의 메시지 박스를 표시합니다.
         * @param {string} message 표시할 메시지.
         */
        function showMessage(message) {
            document.getElementById('message-text').innerText = message;
            document.getElementById('message-box').style.display = 'block';
            document.getElementById('overlay').style.display = 'block';
        }
        document.getElementById('message-ok-btn').addEventListener('click', () => { document.getElementById('message-box').style.display = 'none'; document.getElementById('overlay').style.display = 'none'; });
        
        /**
         * 특정 섹션으로 이동합니다.
         * @param {string} sectionId 이동할 섹션의 ID.
         * @param {string} [subSectionId=null] 이동할 서브 섹션의 ID (선택 사항).
         */
        function navigateToSection(sectionId, subSectionId = null) {
            document.querySelectorAll('main > section').forEach(section => section.classList.add('hidden'));
            const targetSection = document.getElementById(sectionId);
            if (targetSection) {
                targetSection.classList.remove('hidden');
                window.scrollTo({ top: 0, behavior: 'smooth' });
                currentActiveSection = sectionId;

                // 특정 서브 섹션으로 스크롤 (만약 정의되어 있다면)
                if (subSectionId) {
                    const subSectionTarget = document.getElementById(subSectionId);
                    if (subSectionTarget) {
                        // 메인 섹션이 렌더링된 후 스크롤되도록 약간의 지연 추가
                        setTimeout(() => {
                            subSectionTarget.scrollIntoView({ behavior: 'smooth', block: 'start' });
                        }, 100); 
                    }
                }

                if (sectionId === 'review-board-page') renderReviewList();
                if (sectionId === 'qa-board-page') renderQAList();
            }
        }

        // 게시판 공통 로직 (Firestore 기반으로 변경)
        /**
         * Firebase를 초기화하고 사용자 인증을 처리합니다.
         */
        async function initializeFirebase() {
            try {
                // Firebase 앱 초기화
                const { initializeApp } = await import("https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js");
                const { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } = await import("https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js");
                const { getFirestore, collection, addDoc, onSnapshot, query } = await import("https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js");

                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);

                // 사용자 인증
                const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                } else {
                    await signInAnonymously(auth);
                }

                // 인증 상태 변경 리스너
                onAuthStateChanged(auth, (user) => {
                    if (user) {
                        userId = user.uid;
                        // For a demo, display user ID for clarity. In a real app, this might be a username.
                        document.getElementById('user-id-display').innerText = `User ID: ${userId}`;
                        console.log("Firebase initialized and user authenticated:", userId);
                        setupReviewListener();
                        setupQAListener();
                    } else {
                        userId = 'anonymous';
                        document.getElementById('user-id-display').innerText = 'User ID: Not Logged In (Anonymous)';
                        console.log("User is not authenticated (anonymous or logged out).");
                        reviewPostsData = [];
                        qaPostsData = [];
                        renderReviewList();
                        renderQAList();
                    }
                });

            } catch (error) {
                console.error("Firebase initialization or authentication error:", error);
                showMessage(`Firebase 초기화 또는 인증 오류: ${error.message}`);
                userId = 'error';
                document.getElementById('user-id-display').innerText = `Error: ${error.message}`;
            }
        }

        /**
         * Firestore에서 후기 게시글 목록을 실시간으로 가져옵니다.
         */
        function setupReviewListener() {
            if (!db || !userId) {
                console.warn("Firestore 또는 userId가 준비되지 않아 후기 리스너를 설정할 수 없습니다.");
                return;
            }

            const reviewsCol = collection(db, `artifacts/${appId}/public/data/review_posts`);
            const q = query(reviewsCol);

            onSnapshot(q, (snapshot) => {
                const posts = [];
                snapshot.forEach(doc => {
                    posts.push({ id: doc.id, ...doc.data() });
                });
                reviewPostsData = posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
                renderReviewList();
                console.log("후기 게시글이 업데이트되었습니다.");
            }, (error) => {
                console.error("Error fetching review posts:", error);
                showMessage(`후기 게시글 로드 중 오류 발생: ${error.message}`);
            });
        }

        /**
         * 후기 게시글 목록을 화면에 렌더링합니다.
         */
        function renderReviewList() {
            const listContainer = document.getElementById('review-list-dynamic');
            listContainer.innerHTML = '';

            if (reviewPostsData.length === 0) {
                listContainer.innerHTML = '<p class="text-gray-500 text-center">아직 작성된 후기가 없습니다. 첫 후기를 남겨주세요!</p>';
                return;
            }

            reviewPostsData.forEach(post => {
                const postElement = document.createElement('div');
                postElement.className = 'p-6 border rounded-lg shadow-sm bg-white text-left cursor-pointer hover:shadow-md transition-shadow';
                postElement.setAttribute('onclick', `viewReviewPost('${post.id}')`);
                postElement.innerHTML = `
                    <h4 class="font-bold text-lg mb-2">${post.title}</h4>
                    <p class="text-gray-600 mb-3 truncate">${post.content}</p>
                    <p class="text-sm text-gray-500">작성자: ${post.author} | 날짜: ${new Date(post.createdAt).toLocaleDateString()}</p>
                `;
                listContainer.appendChild(postElement);
            });
        }

        /**
         * 후기 작성 폼 제출을 처리합니다.
         * @param {Event} event 폼 제출 이벤트.
         */
        async function handleReviewSubmit(event) {
            event.preventDefault();

            if (!db || userId === 'anonymous' || userId === 'error') {
                showMessage('데이터를 저장하려면 먼저 로그인하거나 Firebase가 올바르게 초기화되어야 합니다.');
                return;
            }

            const author = document.getElementById('review-author').value.trim();
            const title = document.getElementById('review-title').value.trim();
            const content = document.getElementById('review-content').value.trim();

            if (!author || !title || !content) {
                showMessage('모든 필드를 입력해주세요.');
                return;
            }

            try {
                const newPost = {
                    author: author,
                    title: title,
                    content: content,
                    createdAt: new Date().toISOString(),
                    userId: userId
                };

                const { addDoc, collection } = await import("https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js");
                const collectionPath = `artifacts/${appId}/public/data/review_posts`;
                await addDoc(collection(db, collectionPath), newPost);

                document.getElementById('review-form').reset();
                showMessage('후기가 성공적으로 등록되었습니다.');
                navigateToSection('review-board-page');
            } catch (error) {
                console.error("Error adding review post:", error);
                showMessage(`후기 등록 중 오류 발생: ${error.message}`);
            }
        }

        /**
         * 특정 후기 게시글의 상세 내용을 봅니다.
         * @param {string} postId 볼 게시글의 ID.
         */
        function viewReviewPost(postId) {
            const post = reviewPostsData.find(p => p.id === postId);

            if (!post) {
                showMessage('게시글을 찾을 수 없습니다.');
                return;
            }

            document.getElementById('review-detail-title').innerText = post.title;
            document.getElementById('review-detail-meta').innerText = `작성자: ${post.author} | 작성일: ${new Date(post.createdAt).toLocaleString()}`;
            document.getElementById('review-detail-content').innerText = post.content;

            navigateToSection('review-detail-page');
        }

        /**
         * Firestore에서 Q&A 게시글 목록을 실시간으로 가져옵니다.
         */
        function setupQAListener() {
            if (!db || !userId) {
                console.warn("Firestore 또는 userId가 준비되지 않아 Q&A 리스너를 설정할 수 없습니다.");
                return;
            }

            const qaCol = collection(db, `artifacts/${appId}/public/data/qa_posts`);
            const q = query(qaCol);

            onSnapshot(q, (snapshot) => {
                const posts = [];
                snapshot.forEach(doc => {
                    posts.push({ id: doc.id, ...doc.data() });
                });
                qaPostsData = posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
                renderQAList();
                console.log("Q&A 게시글이 업데이트되었습니다.");
            }, (error) => {
                console.error("Error fetching Q&A posts:", error);
                showMessage(`Q&A 게시글 로드 중 오류 발생: ${error.message}`);
            });
        }

        /**
         * Q&A 게시글 목록을 화면에 렌더링합니다.
         */
        function renderQAList() {
            const listContainer = document.getElementById('qa-list-dynamic');
            listContainer.innerHTML = '';

            if (qaPostsData.length === 0) {
                listContainer.innerHTML = '<p class="text-gray-500 text-center">아직 등록된 질문이 없습니다. 첫 질문을 남겨보세요!</p>';
                return;
            }

            qaPostsData.forEach(post => {
                const postElement = document.createElement('div');
                postElement.className = 'p-6 border rounded-lg shadow-sm bg-white text-left cursor-pointer hover:shadow-md transition-shadow';
                postElement.setAttribute('onclick', `viewQAPost('${post.id}')`);
                postElement.innerHTML = `
                    <h4 class="font-bold text-lg mb-2">${post.title}</h4>
                    <p class="text-gray-600 mb-3 truncate">${post.content}</p>
                    <p class="text-sm text-gray-500">작성자: ${post.author} | 날짜: ${new Date(post.createdAt).toLocaleDateString()}</p>
                `;
                listContainer.appendChild(postElement);
            });
        }

        /**
         * Q&A 작성 폼 제출을 처리합니다.
         * @param {Event} event 폼 제출 이벤트.
         */
        async function handleQASubmit(event) {
            event.preventDefault();

            if (!db || userId === 'anonymous' || userId === 'error') {
                showMessage('데이터를 저장하려면 먼저 로그인하거나 Firebase가 올바르게 초기화되어야 합니다.');
                return;
            }

            const author = document.getElementById('qa-author').value.trim();
            const title = document.getElementById('qa-title').value.trim();
            const content = document.getElementById('qa-content').value.trim();

            if (!author || !title || !content) {
                showMessage('모든 필드를 입력해주세요.');
                return;
            }

            try {
                const newPost = {
                    author: author,
                    title: title,
                    content: content,
                    createdAt: new Date().toISOString(),
                    userId: userId
                };

                const { addDoc, collection } = await import("https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js");
                const collectionPath = `artifacts/${appId}/public/data/qa_posts`;
                await addDoc(collection(db, collectionPath), newPost);

                document.getElementById('qa-form').reset();
                showMessage('질문이 성공적으로 등록되었습니다.');
                navigateToSection('qa-board-page');
            } catch (error) {
                console.error("Error adding Q&A post:", error);
                showMessage(`질문 등록 중 오류 발생: ${error.message}`);
            }
        }

        /**
         * 특정 Q&A 게시글의 상세 내용을 봅니다.
         * @param {string} postId 볼 게시글의 ID.
         */
        function viewQAPost(postId) {
            const post = qaPostsData.find(p => p.id === postId);

            if (!post) {
                showMessage('게시글을 찾을 수 없습니다.');
                return;
            }

            document.getElementById('qa-detail-title').innerText = post.title;
            document.getElementById('qa-detail-meta').innerText = `작성자: ${post.author} | 작성일: ${new Date(post.createdAt).toLocaleString()}`;
            document.getElementById('qa-detail-content').innerText = post.content;

            navigateToSection('qa-detail-page');
        }


        // ========= AI 생성기 및 초기화 로직 =========
        document.addEventListener('DOMContentLoaded', () => {
            const generateBtn = document.getElementById('generate-btn-advanced');
            const loadingIndicator = document.getElementById('loading-indicator');
            const generatedImage = document.getElementById('generated-image');
            const resultTitle = document.getElementById('result-title');
            const saveImageBtn = document.getElementById('save-image-btn');
            
            // 공간 이미지 업로드 미리보기
            document.getElementById('space-image-upload').addEventListener('change', (event) => {
                const file = event.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        document.getElementById('preview-image').src = e.target.result;
                        document.getElementById('preview-image').classList.remove('hidden');
                    };
                    reader.readAsDataURL(file);
                }
            });

            // AI 디자인 생성 버튼 클릭 이벤트
            generateBtn.addEventListener('click', async () => {
                // 스타일 프롬프트 유효성 검사
                const stylePrompt = document.getElementById('style-prompt').value.trim(); // ID 변경됨
                if (!stylePrompt) {
                    showMessage('Step 3의 스타일을 꼭 입력해주세요!');
                    return;
                }

                // 로딩 인디케이터 표시 및 결과 숨기기
                loadingIndicator.style.display = 'flex';
                generatedImage.classList.add('hidden');
                resultTitle.classList.add('hidden');
                saveImageBtn.classList.add('hidden');

                // 실제 AI API 호출 대신 시뮬레이션 (2.5초 대기)
                await new Promise(resolve => setTimeout(resolve, 2500));

                // 생성된 이미지 표시 (임시 이미지 사용)
                generatedImage.src = `https://placehold.co/800x600/f0950c/ffffff?text=AI+Generated+Design`;
                generatedImage.classList.remove('hidden');
                resultTitle.classList.remove('hidden');
                saveImageBtn.classList.remove('hidden');
                loadingIndicator.style.display = 'none';
            });
            
            // 이미지 저장 버튼 클릭 이벤트
            saveImageBtn.addEventListener('click', () => showMessage('이미지 저장 기능은 준비 중입니다.'));

            // 페이지 로드 시 Firebase 초기화 및 홈 섹션으로 이동
            initializeFirebase(); 
            navigateToSection('home-section');
        });
    </script>
</body>
</html>
